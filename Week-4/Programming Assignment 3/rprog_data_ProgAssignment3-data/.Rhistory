dataTaller1TD <- gather(data = dataTaller1, Año, Cantidad, 1999:2001)
dataTaller1TD <- gather(data = dataTaller1, Año, Cantidad, "1999":"2001")
dataTaller1TD
dataTaller1TD <- gather(data = dataTaller1, Año, Cantidad, c("1999", "2000", "2001", "2002", "2003"))
dataTaller1TD
View(dataTaller1TD)
#dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";", col_names = c("Ciudad", "1999", "2000", "2001", "2002", "2003"), skip = 1)
dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";")
#dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";", col_names = c("Ciudad", "1999", "2000", "2001", "2002", "2003"), skip = 1)
dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";")
dataTaller1
names(dataTaller1)[4] = "2001"
names(dataTaller1)[6] = "2003"
dataTaller1
continentes <- c("ASIA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "EUROPA", "EUROPA", "AMERICA")
dataTaller1$Continente <- continentes
dataTaller1
dataTaller1$Ciudad <- str_to_title(dataTaller1$Ciudad)
dataTaller1
filter(dataTaller1,str_detect(dataTaller1$Continente, "AM"))
dataTaller1TD <- gather(data = dataTaller1, Año, Cantidad, c("1999", "2000", "2001", "2002", "2003"))
View(dataTaller1TD)
library(readr)
library(tidyr)
library(stringr)
library(dplyr)
library(readr)
library(tidyr)
library(stringr)
library(dplyr)
#dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";", col_names = c("Ciudad", "1999", "2000", "2001", "2002", "2003"), skip = 1)
dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";")
dataTaller1
names(dataTaller1)[4] = "2001"
names(dataTaller1)[6] = "2003"
dataTaller1
continentes <- c("ASIA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "EUROPA", "EUROPA", "AMERICA")
$Continente
dataTaller1$Continente <- continentes
dataTaller1
View(dataTaller1)
View(dataTaller1)
dataTaller1TD <- gather(data = dataTaller1, Año, Cantidad, c("1999", "2000", "2001", "2002", "2003"))
View(dataTaller1TD)
filter(dataTaller1,str_detect(dataTaller1$Continente, "AMÉRICA"))
filter(dataTaller1TD,str_detect(dataTaller1TD$Continente, "AMÉRICA"))
view(filter(dataTaller1TD,str_detect(dataTaller1TD$Continente, "AMÉRICA")))
View(filter(dataTaller1TD,str_detect(dataTaller1TD$Continente, "AMÉRICA")))
library(readr)
library(tidyr)
library(stringr)
library(dplyr)
#dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";", col_names = c("Ciudad", "1999", "2000", "2001", "2002", "2003"), skip = 1)
dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";")
View(dataTaller1)
names(dataTaller1)[4] = "2001"
names(dataTaller1)[6] = "2003"
View(dataTaller1)
continentes <- c("ASIA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "EUROPA", "EUROPA", "AMERICA")
$Continente
continentes <- c("ASIA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "EUROPA", "EUROPA", "AMERICA")
dataTaller1$Continente <- continentes
View(dataTaller1)
dataTaller1 <- str_to_title(dataTaller1$Ciudad)
View(dataTaller1)
#dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";", col_names = c("Ciudad", "1999", "2000", "2001", "2002", "2003"), skip = 1)
dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";")
View(dataTaller1)
library(readr)
library(tidyr)
library(stringr)
library(dplyr)
library(readr)
library(tidyr)
library(stringr)
library(dplyr)
#dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";", col_names = c("Ciudad", "1999", "2000", "2001", "2002", "2003"), skip = 1)
dataTaller1 <- read_delim("/media/sebastian/Datos/UPTC/10° Semestre/Electiva1/Taller1/Taller_1.txt", delim = ";")
View(dataTaller1)
names(dataTaller1)[4] = "2001"
names(dataTaller1)[6] = "2003"
View(dataTaller1)
continentes <- c("ASIA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "AMÉRICA", "EUROPA", "EUROPA", "AMERICA")
dataTaller1$Continente <- continentes
View(dataTaller1)
dataTaller1$Ciudad <- str_to_title(dataTaller1$Ciudad)
View(dataTaller1)
dataTaller1TD <- gather(data = dataTaller1, Año, Cantidad, c("1999", "2000", "2001", "2002", "2003"))
View(dataTaller1TD)
View(filter(dataTaller1TD,str_detect(dataTaller1TD$Continente, "AMÉRICA")))
install.packages(c("dplyr", "readr", "stringr", "tidyr"))
version
version
uninstall.R()
getRversion()
R.Version()$version.string
installr
install.packages("installr")
install.packages(c("BH", "cpp11", "dplyr", "fansi", "hms", "rlang", "tibble"))
swirl::swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by = 0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
swirl::swirl()
num_vect <- (0.5, 55, -10, 6)
num_vect <- (05, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[num_vect < 1]
tf <- num_vect < 1
tf
num_vect >= 6
my_char = ["My", "name", "is"]
my_char = c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Joham")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X, "Y", "Z"), sep = "")
paste(c(1:3), c("X, "Y"", "Z"), sep = "")
c(1:3)
paste(1:3, c("X, "Y"", "Z"), sep = "")
paste(1:3, c("X, "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
clear
cls
swirl::swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
O
0/0
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2,
| norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
x <- 1:4
lapply(x, runif)
x <- 1:4
lapply(x, runif)
x <- 1:5
lapply(x, function(y) {
y*2
})
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/1-LoopFuntions.R')
x <- 1:5
lapply(x, function(y) {
y*2
})
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/1-LoopFuntions.R')
x <- list(a=1:5, b=5:10, c=10:15)
sapply(x, mean)
x <- list(a=1:5, b=5:10, c=10:15)
typeof(lapply(x, mean))
typeof(sapply(x, mean))
x <- list(a=1:5, b=5:10, c=10:15)
typeof(lapply(x, mean))
lapply(x, mean)
typeof(sapply(x, mean))
sapply(x, mean)
x <- list(a=1:5, b=5:10, c=10:15)
typeof(lapply(x, mean))
lapply(x, mean)
typeof(sapply(x, mean))
sapply(x, mean)
x <- matrix(rnorm(100), 5,3)
x
apply(x, 1, mean)
apply(x, 2, mean)
x <- matrix(rnorm(15), 5,3)
x
apply(x, 1, mean)
apply(x, 2, mean)
x <- matrix(rnorm(15), 5,3)
x
apply(x, 1, mean)
apply(x, 2, mean)
x <- matrix(c(rep(1,5), rep(2,5), rep(3,5)), 5,3)
x
apply(x, 1, mean)
apply(x, 2, mean)
x <- matrix(c(rep(1,5), rep(2,5), rep(3,5)), 5,3)
x
apply(x, 1, mean)
apply(x, 2, mean)
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/2-LoopFuntions-Apply.R')
x <- list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
x
y <- mapply(rep, 1:4, 4:1)
y
[1] 1 1 1 1
#
# [[2]]
# [1] 2 2 2
#
# [[3]]
# [1] 3 3
#
# [[4]]
# [1] 4
#
x <- c(rnorm(10), runif(10), rnorm(10))
f <- gl(3,10)
f
tapply(x, f, mean)
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/4-LoopFuntions-Tapply.R')
tapply(x, f, range)
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/4-LoopFuntions-Tapply.R')
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, mean, simplify = FALSE)
typeof(tapply(x, f, mean, simplify = FALSE))
tapply(x, f, mean, simplify = TRUE)
typeof(tapply(x, f, mean, simplify = TRUE))
tapply(x, f, mean, simplify = FALSE)
typeof(tapply(x, f, mean, simplify = FALSE))
tapply(x, f, mean, simplify = TRUE)
typeof(tapply(x, f, mean, simplify = TRUE))
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/4-LoopFuntions-Tapply.R')
x <- sample(1:10,20,replace=F)
f <- gl(3,20)
split(x, f)
x <- sample(1:50,20,replace=F)
f <- gl(3,20)
split(x, f)
x <- sample(1:50,20,replace=T)
f <- gl(3,20)
split(x, f)
x <- sample(1:50, 20)
length(x)
f <- gl(3,20)
length(f)
split(x, f)
x <- sample(1:50, 20)
length(x)
f <- gl(5,4)
length(f)
split(x, f)
x <- sample(1:50, 20)
f <- gl(2,10)
split(x, f)
library(datasets)
head(airquality)
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/5-LoopFuntions-Split.R')
s <- split(airquality, airquality$Month)  # Separar el dataset por la columna 'Month'
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]) )
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/5-LoopFuntions-Split.R')
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]) )
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE) )
gender <- gl(c("man","woman"), 10)
gender <- gl(2, 10, labels = c("man","woman"))
gender
stratum <- gl(3, 8, labels = c("stratum1","stratum2", "stratum3"))
stratum
interaction(gender, stratum)
length(stratum)
length(gender)
stratum <- gl(3, 9, labels = c("stratum1","stratum2", "stratum3"))
length(gender)
gender <- gl(2, length = 24, labels = c("man","woman"))
length(gender)
stratum <- gl(3, length = 24, labels = c("stratum1","stratum2", "stratum3"))
length(stratum)
stratum <- gl(3, 8, labels = c("stratum1","stratum2", "stratum3"))
length(stratum)
length(gender)
gender <- gl(2, 12, labels = c("man","woman"))
length(gender)
length(stratum)
length(gender)
income <- sample(100:1000, 24)
gender <- gl(2, 12, labels = c("man","woman"))
length(gender)
stratum <- gl(3, 8, labels = c("stratum1","stratum2", "stratum3"))
length(stratum)
interaction(gender, stratum)
income <- sample(100:1000, 24)
gender <- gl(2, 12)
length(gender)
stratum <- gl(3, 8)
length(stratum)
interaction(gender, stratum)
income <- sample(100:1000, 24)
gender <- gl(2, 12, labels = c("man","woman"))
length(gender)
stratum <- gl(3, 8, labels = c("stratum1","stratum2", "stratum3"))
length(stratum)
interaction(gender, stratum)
str(split(income, list(gender, stratum)))
source('~/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-3/5-LoopFuntions-Split.R')
str(split(income, list(gender, stratum), drop = TRUE))
library(datasets)
data(mtcars)
unique(mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(209.21429-82.63636), digits = 0)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best("SC", "heart attack")
pwd()
getwd()
path = "/home/sebastian/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-4/Programming Assignment 3/rprog_data_ProgAssignment3-data"
setwd(path)
getwd()
best("SC", "heart attack")
rankhospital <- function(state, outcome, rank = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (!state %in% fd[, "state"]) {
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(rank)) {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]                     # extracting dataframe for the called state
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
output <- ts[, "hospital"][rank]
} else if (!is.numeric(rank)){
if (rank == "best") {
output <- best(state, outcome)
} else if (rank == "worst") {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"], decreasing = TRUE), ]
output <- ts[, "hospital"][1]
} else {
stop('invalid rank')
}
}
return(output)
}
# To put the path where the file 'outcome-of-care-measures.csv' is located
path = "/home/sebastian/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-4/Programming Assignment 3/rprog_data_ProgAssignment3-data"
setwd(path)
getwd()
rankhospital("NC", "heart attack", "worst")
rankall <- function(outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
# To put the path where the file 'outcome-of-care-measures.csv' is located
path = "/home/sebastian/Documentos/CURSOS/Cursos-Coursera/R-Programming/Week-4/Programming Assignment 3/rprog_data_ProgAssignment3-data"
setwd(path)
getwd()
head(rankall("heart attack", 20), 10)
best("SC", "heart attack")
source('../best.R')
source('../rankall.R')
source('../rankhospital.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
